name: Test Build Deploy
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: install final-form dependecies
        run: npm ci --legacy-peer-deps final-form

      - name: build images
        run: npm run build

      # - name: Run pre-build steps (e.g., linting)
      #   run: npm run lint

      # - name: Run unit tests
      #   run: npm run test:unit

      # - name: Run integration tests
      #   run: npm run test:integration

  build_image:
    runs-on: ubuntu-latest
    name: Build Image. This would be edited to copy attifact
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build the Docker image
        run: docker-compose build --no-cache --force-rm
  test_image_install:
    runs-on: ubuntu-latest
    name: image setup test
    steps:
      - uses: actions/checkout@v2
      - name: Test the Docker image
        run: docker-compose up -d
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Print secret test
        run: echo "hello ${{ vars.REGISTRY}}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ vars.REGISTRY }}/${{ vars.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: "{{defaultContext}}"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  refresh_instance_state:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.DEPLOYMENT_REGION }} 

      - name: Refresh Auto Scaling Group Instances
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ vars.ASG_NAME }} \
            --preferences '{"InstanceWarmup":300}'